using System;
using System.Text;
using System.Collections.Generic;
using System.Linq;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using KillerApps.Emulation.Core;
using System.IO;
using System.Diagnostics;

namespace KillerApps.Emulation.Processors.Tests
{
	/// <summary>
	/// Summary description for Disassembler6502Test
	/// </summary>
	[TestClass]
	public class Disassembler6502Test
	{
		public const string BootRomImageFilePath = @"LynxBoot.img";
		public const string RomImageFilePath = @"TestRedEye.bin";

		private TestContext testContextInstance;
		private Ram64KBMemoryStub ram = null;
		private byte[] memory = null;
		private Disassembler6502 disassembler = new Disassembler6502();
		
		private byte[] bllLoader = new byte[]
			{
				0x91, 0x11, 0x10, 0x09, 0x08, 0x28, 0x2a, 0x04, 0x06, 0x92, 0x90, 0x01, 0x24, 0x20, 0x04, 0x00,
				0x7f, 0x7f, 0x00, 0x00, 0x20, 0x01, 0x8d, 0x8a, 0xfd, 0x20, 0x57, 0x03, 0x64, 0x28, 0xa9, 0x24,
				0x85, 0x29, 0xad, 0x80, 0x03, 0x85, 0x20, 0x20, 0xc8, 0x02, 0xae, 0x81, 0x03, 0xac, 0x82, 0x03,
				0x20, 0x9f, 0x02, 0xae, 0x86, 0x03, 0xac, 0x87, 0x03, 0x20, 0xaa, 0x02, 0xa2, 0x0a, 0xbd, 0x0b,
				0x02, 0xbc, 0x00, 0x02, 0x99, 0x00, 0xfc, 0xca, 0x10, 0xf4, 0x9c, 0x90, 0xfd, 0x9c, 0x91, 0xfd,
				0x2c, 0x92, 0xfc, 0xd0, 0xf8, 0x9c, 0x90, 0xfd, 0x9c, 0x94, 0xfd, 0xa9, 0x04, 0x8d, 0x95, 0xfd,
				0xa2, 0x1f, 0xbd, 0x00, 0x24, 0x9d, 0xa0, 0xfd, 0xca, 0xd0, 0xf7, 0x20, 0xf4, 0x02, 0xee, 0xa0,
				0xfd, 0xa5, 0x2c, 0xd0, 0xf9, 0x20, 0x57, 0x03, 0xad, 0x88, 0x03, 0x85, 0x20, 0x20, 0xc8, 0x02,
				0xae, 0x89, 0x03, 0xac, 0x8a, 0x03, 0x20, 0x9f, 0x02, 0xad, 0x8d, 0x03, 0x85, 0x29, 0xad, 0x8c,
				0x03, 0x85, 0x28, 0xae, 0x8e, 0x03, 0xac, 0x8f, 0x03, 0x20, 0xaa, 0x02, 0x6c, 0x8c, 0x03, 0xe8,
				0xd0, 0x03, 0xc8, 0xf0, 0x4e, 0x20, 0xbd, 0x02, 0x80, 0xf5, 0xe8, 0xd0, 0x03, 0xc8, 0xf0, 0x43,
				0x20, 0xbd, 0x02, 0x92, 0x28, 0xe6, 0x28, 0xd0, 0xf1, 0xe6, 0x29, 0x80, 0xed, 0xad, 0xb2, 0xfc,
				0xe6, 0x2a, 0xd0, 0x2f, 0xe6, 0x2b, 0xd0, 0x2b, 0x48, 0xda, 0x5a, 0xa5, 0x20, 0xe6, 0x20, 0xa0,
				0x1c, 0xa2, 0x1e, 0x38, 0x80, 0x0b, 0x90, 0x04, 0x8e, 0x8b, 0xfd, 0x18, 0xe8, 0x8e, 0x87, 0xfd,
				0xca, 0x8e, 0x87, 0xfd, 0x2a, 0x8c, 0x8b, 0xfd, 0xd0, 0xec, 0x64, 0x2a, 0xa9, 0xfc, 0x85, 0x2b,
				0x7a, 0xfa, 0x68, 0x60, 0xa2, 0x00, 0xa0, 0x07, 0x8a, 0x0a, 0x90, 0x02, 0x49, 0x95, 0x88, 0x10,
				0xf8, 0x9d, 0x00, 0x80, 0xca, 0xd0, 0xef, 0xa2, 0x0f, 0x74, 0x20, 0xca, 0x10, 0xfb, 0x20, 0xc8,
				0x02, 0xa0, 0x01, 0xea, 0xea, 0xea, 0x20, 0xbd, 0x02, 0xaa, 0xbd, 0x00, 0xf0, 0x45, 0x2c, 0x85,
				0x2c, 0x88, 0x10, 0xef, 0xad, 0xb0, 0xfc, 0xf0, 0x03, 0x20, 0x57, 0x03, 0xe6, 0x21, 0xd0, 0xe1,
				0xe6, 0x22, 0xd0, 0xdd, 0x60, 0xad, 0xb2, 0xfc, 0x92, 0x46, 0xe6, 0x46, 0xd0, 0x02, 0xe6, 0x47,
				0x60, 0xe6, 0x50, 0xd0, 0x04, 0xe6, 0x51, 0xf0, 0x09, 0x20, 0x35, 0x03, 0xe8, 0xd0, 0xf2, 0xc8,
				0xd0, 0xef, 0xa9, 0x1a, 0x4c, 0x16, 0x02, 0xa2, 0x1f, 0x9e, 0xa0, 0xfd, 0xca, 0x10, 0xfa, 0x60,
				0x4c, 0x6f, 0x61, 0x64, 0x65, 0x72, 0x32, 0x2e, 0x36, 0x28, 0x63, 0x29, 0x27, 0x39, 0x38, 0x20,
				0x34, 0x32, 0x42, 0x2e, 0x53, 0x63, 0x68, 0x69, 0x63, 0x6b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x01, 0xed, 0xfe, 0x88, 0x00, 0x24, 0xfb, 0xf0, 0x05, 0xdf, 0xff, 0x88, 0x30, 0x42, 0x8f, 0xf4,
				0x07, 0x6f, 0xfc, 0x49, 0x00, 0x00, 0x6b, 0xad, 0x1c, 0xd1, 0xfd, 0x49, 0xf2, 0x4b, 0x73, 0xcb,
				0x29, 0x3b, 0xfd, 0x49, 0xf2, 0x4b, 0x91, 0xe4, 0x30, 0xc3, 0xfd, 0x49, 0xf2, 0x4b, 0x71, 0xba,
				0x41, 0x2b, 0xfc, 0x88, 0xf2, 0x4b, 0xbb, 0xff, 0x42, 0xe7, 0xff, 0x49, 0x00, 0x00, 0x21, 0xfa,
				0x43, 0x09, 0xfe, 0x00, 0x00, 0x00, 0x03, 0xe9, 0x4a, 0xff, 0xff, 0x00, 0x00, 0x00, 0x7b, 0xcc,
				0x56, 0x7b, 0xfc, 0x49, 0x00, 0x00, 0xe9, 0xf9, 0x58, 0x65, 0xfe, 0x49, 0x00, 0x00, 0xe5, 0xf6,
				0x5a, 0x4b, 0xfd, 0x49, 0x00, 0x00, 0xd5, 0xf6, 0x5c, 0x21, 0xfc, 0x49, 0x00, 0x00, 0xf1, 0xf3,
				0x5f, 0x13, 0xfc, 0x00, 0x00, 0x00, 0x5f, 0xd7, 0x6a, 0x73, 0xff, 0x49, 0x00, 0x00, 0xc7, 0xfa
			};

		byte[] decryptedMicroLoader = new byte[50]
			{
				0x9c, 0xf9, 0xff, 0xa9, 0x03, 0x8d, 0x8a, 0xfd, 0xa9, 0x04, 0x8d, 0x8c, 0xfd, 0xa9, 0x08, 0x8d, 
				0x8b, 0xfd, 0xa2, 0x00, 0xad, 0xb2, 0xfc, 0x9d, 0x00, 0x03, 0xe8, 0xd0, 0xf7, 0x4c, 0x00, 0x03, 
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
				0x00, 0x00
			};

		/// <summary>
		///Gets or sets the test context which provides
		///information about and functionality for the current test run.
		///</summary>
		public TestContext TestContext
		{
			get { return testContextInstance; }
			set { testContextInstance = value; }
		}

		#region Additional test attributes
		//
		// You can use the following additional attributes as you write your tests:
		//
		// Use ClassInitialize to run code before running the first test in the class
		// [ClassInitialize()]
		// public static void MyClassInitialize(TestContext testContext) { }
		//
		// Use ClassCleanup to run code after all tests in a class have run
		// [ClassCleanup()]
		// public static void MyClassCleanup() { }
		//
		// Use TestInitialize to run code before running each test 
		[TestInitialize()]
		public void TestInitialize() 
		{
			ram = new Ram64KBMemoryStub();
			memory = ram.GetDirectAccess();
		}
		
		// Use TestCleanup to run code after each test has run
		// [TestCleanup()]
		// public void MyTestCleanup() { }
		//
		#endregion

		[DeploymentItem(@"Binaries\" + RomImageFilePath)]
		[TestMethod]
		public void DisassembleTestRom()
		{
			FileStream romImageStream = new FileStream(
				Path.Combine(TestContext.TestDeploymentDir, RomImageFilePath), FileMode.Open, FileAccess.Read);
			long romLength = romImageStream.Length;
			MemoryStream stream = new MemoryStream(memory, 0x0200, (int)(0x200 + romLength)); 
			romImageStream.CopyTo(stream, (int)romLength);

			ushort offset = 0x0200;
			ushort PC = 0;
			StringBuilder sourceBuilder = new StringBuilder();
			while (PC <= romLength)
			{
				PC += (ushort)disassembler.DisassembleSingleStatement(ram, (ushort)(PC + offset), sourceBuilder);
			}
			Trace.WriteLine(sourceBuilder.ToString());
		}

		[DeploymentItem(@"Binaries\" + BootRomImageFilePath)]
		[TestMethod]
		public void DisassembleBootRom()
		{
			MemoryStream stream = new MemoryStream(memory, 0xFE00, 0x200);
			FileStream bootRomImageStream = new FileStream(
				Path.Combine(TestContext.TestDeploymentDir, BootRomImageFilePath), FileMode.Open, FileAccess.Read);
			long length = bootRomImageStream.Length;
			bootRomImageStream.CopyTo(stream, (int)length);
			
			ushort offset = 0xFE00;
			ushort PC = 0;
			StringBuilder sourceBuilder = new StringBuilder();
			while (PC <= (0xFFFF - offset))
			{
				PC += (ushort)disassembler.DisassembleSingleStatement(ram, (ushort)(PC + offset), sourceBuilder);
			}
			Trace.WriteLine(sourceBuilder.ToString());
		}

		[TestMethod]
		public void DecryptFirstFrame()
		{
			ushort offset = 0x0200;
			ushort PC = 0;
			Array.Copy(bllLoader, 0, memory, offset, bllLoader.Length);
			StringBuilder sourceBuilder = new StringBuilder();
			while (PC <= (0x03FF - offset))
			{
				PC += (ushort)disassembler.DisassembleSingleStatement(ram, (ushort)(PC + offset), sourceBuilder);
			}
			Trace.WriteLine(sourceBuilder.ToString());		
		}
	}
}
